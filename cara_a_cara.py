import random
import time
import tkinter as tk
from tkinter import messagebox, simpledialog

## todas op√ß√µes de esportes 
esportes = {
    "‚öΩ": {"nome": "Futebol", "dicas": ["Uma partida tem 90 minutos.", "O Brasil tem 5 Copas do Mundo.", "Cada time joga com 11 jogadores.",
                                        "A bola √© redonda.", "√â o esporte mais popular do mundo.", "O objetivo √© fazer gols.",
                                        "Tem impedimento.", "√â jogado em campo de grama.", "Tem goleiro.",
                                        "Cristiano Ronaldo e Messi s√£o estrelas desse esporte."]},
    "üèÄ": {"nome": "Basquete", "dicas": ["Cada cesta vale de 1 a 3 pontos.", "√â jogado com as m√£os.", "Michael Jordan √© um √≠cone.",
                                         "Tem dribles e enterradas.", "A bola √© laranja.", "A quadra √© coberta.",
                                         "5 jogadores por time em quadra.", "A NBA √© o principal campeonato.",
                                         "Tem tempo limitado por posse.", "Existe o arremesso de 3 pontos."]},
    "üéæ": {"nome": "Tenis", "dicas": ["A bola deve quicar no campo advers√°rio.", "√â jogado com raquete.", "Pode ser individual ou em duplas.",
                                      "Tem game, set e match.", "Wimbledon √© um torneio famoso.", "Roger Federer √© um nome forte no esporte.",
                                      "O campo pode ser de saibro, grama ou duro.", "Tem vantagem e igualdade.",
                                      "√â silencioso durante os pontos.", "A bola √© pequena e amarela."]},
    "üèê": {"nome": "Volei", "dicas": ["Cada time tem 6 jogadores em quadra.", "√â jogado com as m√£os.", "Tem saque, bloqueio e cortada.",
                                      "A bola n√£o pode tocar o ch√£o.", "O Brasil √© refer√™ncia mundial.",
                                      "Existe o l√≠bero, que usa uniforme diferente.", "√â disputado em sets.",
                                      "Pode ser jogado na praia tamb√©m.", "Tem rota√ß√£o entre jogadores.",
                                      "A rede separa os dois lados."]},
    "üèà": {"nome": "Futebol Americano", "dicas": ["A bola tem formato oval.", "Cada jogada √© t√°tica.", "Tem touchdown e field goal.",
                                                 "√â muito popular nos EUA.", "Os jogadores usam capacetes.",
                                                 "O Super Bowl √© a final mais famosa.", "Tem posi√ß√µes como quarterback e linebacker.",
                                                 "Avan√ßo por jardas.", "√â um esporte de contato.", "Tem 4 quartos no jogo."]},
    "‚öæ": {"nome": "Beisebol", "dicas": ["√â muito popular no Jap√£o e nos EUA.", "Tem bast√£o e luvas.", "O jogador corre por bases.",
                                         "Tem home run.", "O arremessador √© o pitcher.", "O receptor √© o catcher.",
                                         "Jogo com 9 entradas.", "A bola √© branca com costura vermelha.",
                                         "Time que marca mais corridas vence.", "Tem rebatedores."]},
    "ü•ä": {"nome": "Boxe", "dicas": ["√â um esporte de combate.", "Os atletas usam luvas.", "Tem categorias por peso.",
                                     "Muhammad Ali √© uma lenda.", "Tem rounds e ju√≠zes.",
                                     "N√£o pode golpear abaixo da linha de cintura.", "√â praticado no ringue.",
                                     "Objetivo √© nocautear ou pontuar mais.", "Tem contagem de 10 no nocaute.",
                                     "Cada round dura 3 minutos."]},
    "üèì": {"nome": "Tenis de Mesa", "dicas": ["Tamb√©m √© chamado de ping pong.", "Jogado com raquetes pequenas.",
                                             "A mesa tem rede no meio.", "A bola √© leve e pequena.", "Popular na China.",
                                             "Os pontos v√£o at√© 11.", "Pode ser jogado em duplas.", "√â muito r√°pido.",
                                             "A bola deve quicar dos dois lados.", "A mesa √© verde ou azul."]},
    "üè∏": {"nome": "Badminton", "dicas": ["Usa peteca (volante).", "As raquetes s√£o finas e leves.",
                                         "Pode ser individual ou em duplas.", "√â jogado em quadra coberta.",
                                         "√â o esporte de raquete mais r√°pido do mundo.", "Tem saque e rally.",
                                         "Popular na √Åsia.", "O objetivo √© cair no lado advers√°rio.",
                                         "A pontua√ß√£o vai at√© 21.", "A rede √© mais baixa que a do v√¥lei."]},
    "‚õ≥": {"nome": "Golfe", "dicas": ["O objetivo √© colocar a bola no buraco.", "Usa tacos.", "√â jogado em campo aberto.",
                                     "Tem 18 buracos por padr√£o.", "Tiger Woods √© um √≠cone do esporte.",
                                     "√â jogado com calma e precis√£o.", "Cada buraco tem par espec√≠fico.",
                                     "A bola √© pequena e branca.", "Pode demorar horas uma partida.",
                                     "O menor n√∫mero de tacadas vence."]},
    "ü§Ω": {"nome": "Polo Aquatico", "dicas": ["√â jogado dentro da piscina.", "Cada time tem 7 jogadores.",
                                             "O objetivo √© marcar gols.", "Exige muita resist√™ncia.",
                                             "A bola √© arremessada com a m√£o.", "Tem goleiro.",
                                             "N√£o pode encostar no fundo da piscina.", "Tem exclus√µes tempor√°rias.",
                                             "A bola √© amarela.", "√â um esporte ol√≠mpico."]},
    "ü•ã": {"nome": "Judo", "dicas": ["√â um esporte de origem japonesa.", "Usa kimono.", "Tem faixas de gradua√ß√£o.",
                                     "Tem proje√ß√µes e imobiliza√ß√µes.", "√â disputado no tatame.",
                                     "O objetivo √© derrubar ou imobilizar.", "Tem pontua√ß√£o como ippon e waza-ari.",
                                     "Respeito √© fundamental.", "√â muito praticado no Brasil.",
                                     "Foi criado por Jigoro Kano."]}
}
## cria um tabuleiro, torna os emojis uma lista c/ os esportes da sess√£o acima 
def criar_tabuleiro():
    emojis = list(esportes.keys())
    random.shuffle(emojis)
    return [emojis[i:i + 4] for i in range(0, len(emojis), 4)]
## funcao pra salvar o raking sempre que o jogo for finalizado, abrindo o arquivo ranking.txt
def salvar_ranking(nome, pontos, duracao, resultado):
    with open("ranking.txt", "a", encoding="utf-8") as arq:
        arq.write(f"{nome} - {pontos} elimina√ß√µes - {duracao:.2f} segundos - {resultado}\n")

def mostrar_top10():
    try:
        with open("ranking.txt", "r", encoding="utf-8") as arq:
            linhas = arq.readlines() # le todas as linhas do arquivo

        dados = [] # lista pra guardar os dados do ranking
        for linha in linhas: #  percorre por cada linha do arquivo
            partes = linha.strip().split(" - ") # separa a linha em partes, usando o " - " como delimitador
            if len(partes) >= 4: #  verifica se a linha tem pelo menos 4 partes
                try:
                    pontos = int(partes[1].split()[0])
                    tempo = float(partes[2].split()[0])
                    dados.append((pontos, tempo, linha.strip()))
                except ValueError:
                    continue

        # ordenamos por pontua√ß√£o (decrescente) e tempo (crescente)
        dados.sort(key=lambda x: (-x[0], x[1]))

        # selecionamos apenas os 10 primeiros
        top10 = dados[:10]
        if top10:
            texto = "\n".join([f"{i+1}. {item[2]}" for i, item in enumerate(top10)])
        else:
            texto = "Ainda n√£o h√° registros no ranking."

    except FileNotFoundError:
        texto = "Ainda n√£o h√° ranking registrado."

    messagebox.showinfo("üèÜ Top 10 Ranking", texto)

# vamos usar o self para guardar as informacoes, cada atributo da classe vai ser um atributo do objeto, e vamos usar o self pra acessar
class JogoGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Cara a Cara dos esportes - Elimine 11 e ven√ßa! üèÜ")
        
        mostrar_top10()
        # perguntamos o nome
        # simple dialog vai pedir informacoes pro usuario, com uma caixa de dialogo q tem campo de texto
        self.nome = simpledialog.askstring("Nome", "Digite seu nome:", parent=self.root)
        if not self.nome:
            self.root.destroy();  return

        # estados iniciais do jogo
        self.tab_jog = criar_tabuleiro()
        self.tab_mac = criar_tabuleiro()
        self.revel_jog = [[True]*4 for _ in self.tab_jog]
        self.revel_mac = [[True]*4 for _ in self.tab_mac]
        self.emoji_secreto_mac = random.choice([e for linha in self.tab_jog for e in linha])
        self.emoji_secreto_jog = random.choice([e for linha in self.tab_mac for e in linha])
        self.pontos_jog = 0
        self.pontos_mac = 0
        self.inicio = time.time()

        # interface 
        self._construir_layout()
        self._atualizar_painel_pontos()

    # layout 
    def _construir_layout(self):
        topo = tk.Frame(self.root); topo.pack(pady=8)

        self.lbl_pontos = tk.Label(topo, font=("Helvetica", 12, "bold"))
        self.lbl_pontos.pack()

        quadros = tk.Frame(self.root); quadros.pack()

        self.frm_jogador = tk.LabelFrame(quadros, text=f"Seu Tabuleiro ({self.nome})")
        self.frm_maquina = tk.LabelFrame(quadros, text="Tabuleiro da M√°quina")
        self.frm_jogador.grid(row=0, column=0, padx=10, pady=10)
        self.frm_maquina.grid(row=0, column=1, padx=10, pady=10)

        self.btns_jog = []   # bot√µes do jogador (apenas exibi√ß√£o)
        self.btns_mac = []   # bot√µes que o jogador pode clicar
        for i, linha in enumerate(self.tab_jog):
            fila_btns_jog, fila_btns_mac = [], []
            for j, emoji in enumerate(linha):
                # aqui pro jogador
                b = tk.Button(self.frm_jogador, text=emoji, width=4, height=2, # define o tamanho do bot√£o (n√£o do emoji em si), basicamente a √°rea clic√°vel
                              font=("Segoe UI Emoji", 20), state="disabled") # esse sim define o tamanho do emoji, a font 
                b.grid(row=i, column=j, padx=2, pady=2)
                fila_btns_jog.append(b)
                # aqui pra maquina
                b2 = tk.Button(self.frm_maquina, text="‚ùì", width=4, height=2,
                               font=("Segoe UI Emoji", 20),
                               command=lambda r=i, c=j: self._click_maquina(r, c))
                b2.grid(row=i, column=j, padx=2, pady=2)
                fila_btns_mac.append(b2)
            self.btns_jog.append(fila_btns_jog)
            self.btns_mac.append(fila_btns_mac)

    # geral, movimentos do jogador e da m√°quina
    def _click_maquina(self, r, c):
        if not self.revel_mac[r][c]:    # caso j√° eliminado
            return

        emoji = self.tab_mac[r][c]
        dica = random.choice(esportes[emoji]["dicas"]) # puxo uma dica aleatoria do emoji clicado, com random, buscando no dicionario pela chave emoji
        resposta = simpledialog.askstring("Dica", f"{dica}\n\nQual √© o esporte?") # questiono qual o esporte (utilizando o simpledialog)

        if resposta and resposta.strip().upper() == esportes[emoji]["nome"].upper(): ## igualamos a resposta do usuario com o nome do emoji, ignorando maiusculas e minusculas e tamb√©m os espa√ßos com strip
            self.revel_mac[r][c] = False
            self.btns_mac[r][c]["text"] = "‚ùå" ## mudamos o texto do bot√£o pra ‚ùå
            self.btns_mac[r][c]["state"] = "disabled" ## desabilitamos o bot√£o p√≥s clique
            self.pontos_jog += 1 ## jogador ganha um ponto
            messagebox.showinfo("Correto", f"Voc√™ eliminou {emoji}!") ## mostramos uma janela c mensagem de sucesso e o emoji eliminado
        else:
            messagebox.showwarning("Errado", "Resposta incorreta.")

        self._maquina_joga()
        self._atualizar_painel_pontos()
        self._verificar_fim()

    def _maquina_joga(self):
     messagebox.showinfo("Vez da M√°quina", "Agora a m√°quina vai jogar, clique em OK para continuar‚Ä¶")

     CHANCE_DE_ACERTO = 0.3 # defini 30% de chance da maquina acertar apenas

    # op√ß√µes dispon√≠veis (pe√ßas ainda n√£o eliminadas)
     opcoes = [(i, j) for i in range(len(self.tab_jog))
              for j in range(4) if self.revel_jog[i][j]]
     if not opcoes:
        return

     i, j = random.choice(opcoes)
     emoji = self.tab_jog[i][j]
     acertou = random.random() < CHANCE_DE_ACERTO

     if acertou:
        self.revel_jog[i][j] = False
        self.btns_jog[i][j]["text"] = "‚ùå"
        self.pontos_mac += 1

        if emoji == self.emoji_secreto_mac:
            msg = "A m√°quina tentou adivinhar e acertou seu esporte secreto!"
        else:
            msg = f"A m√°quina acertou e eliminou a pe√ßa em {chr(j+65)}{i+1}."
     else:
        if emoji == self.emoji_secreto_mac:
            msg = "A m√°quina tentou adivinhar seu esporte secreto, mas errou."
        else:
            msg = f"A m√°quina tentou eliminar a pe√ßa em {chr(j+65)}{i+1}, mas errou o palpite."

     messagebox.showinfo("M√°quina", msg)

    # painel dos pontos e verifica√ß√£o de fim de jogo 
    def _atualizar_painel_pontos(self):
        self.lbl_pontos.config(
            text=f"{self.nome}: {self.pontos_jog} elimina√ß√µes   |   M√°quina: {self.pontos_mac} elimina√ß√µes"
        )

    def _verificar_fim(self):
        rest_jog = sum(row.count(True) for row in self.revel_jog)
        rest_mac = sum(row.count(True) for row in self.revel_mac)
        if rest_jog == 1 or rest_mac == 1:
            fim = time.time()
            resultado = "Vit√≥ria" if self.pontos_jog > self.pontos_mac else "Derrota"
            salvar_ranking(self.nome, self.pontos_jog, fim - self.inicio, resultado)
            messagebox.showinfo("Fim de Jogo",
                                f"Resultado: {resultado}\n\n{self.nome}: {self.pontos_jog} elimina√ß√µes\n"
                                f"M√°quina: {self.pontos_mac} elimina√ß√µes")
            self.root.destroy()

# executa o jogo
if __name__ == "__main__":
    tk.Tk().report_callback_exception = lambda *args: print("Erro:", args)  
    root = tk.Tk()
    game = JogoGUI(root)
    root.mainloop()
